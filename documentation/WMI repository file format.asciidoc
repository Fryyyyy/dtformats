= WMI repository file formats

:toc:
:toclevels: 4

:numbered!:
[abstract]
== Summary

The WMI repository, also known as the Common Information Model (CIM) repository,
holds the schema, also called the object repository or class store, that models
the managed environment and defines every piece of data exposed by WMI.

This document is intended as a working document for the WMI repository file
format specifications.

[preface]
== Document information

[cols="1,5"]
|===
| Author(s): | Joachim Metz <joachim.metz@gmail.com>
| Abstract: | This document contains information about the WMI repository file formats
| Classification: | Public
| Keywords: | OBJECTS.DATA, WMI repository
|===

[preface]
== License

....
Copyright (C) 2015-2022, Joachim Metz <joachim.metz@gmail.com>.
Permission is granted to copy, distribute and/or modify this document under the
terms of the GNU Free Documentation License, Version 1.3 or any later version
published by the Free Software Foundation; with no Invariant Sections, no
Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included
in the section entitled "GNU Free Documentation License".
....

[preface]
== Revision history

[cols="1,1,1,5",options="header"]
|===
| Version | Author | Date | Comments
| 0.0.1 | J.B. Metz | May 2015 | Initial version.
| 0.0.2 | J.B. Metz | November 2015 | Additional information about index binary-tree file format.
| 0.0.3 | J.B. Metz | November 2015 | Additional information about objects.data file format.
| 0.0.4 | J.B. Metz | February 2016 | Additional information about format used in Windows XP.
| 0.0.5 | J.B. Metz | March 2016 | Additional information about format used in Windows XP.
| 0.0.6 | J.B. Metz | April 2017 | Textual changes.
| 0.0.7 | J.B. Metz | May 2017 | Textual changes.
| 0.0.8 | J.B. Metz | Janunary 2022 | Additional information about format.
| 0.0.8 | J.B. Metz | February 2022 | Additional information about format.
|===

:numbered:
== Overview

The WMI repository, also known as the Common Information Model (CIM) repository,
holds the schema, also called the object repository or class store, that models
the managed environment and defines every piece of data exposed by WMI.

The location and format of the WMI repository varies per Windows version.

=== Windows 9x/Me

In Windows 95 OSR 2.5, Windows 98, Windows Millennium Edition (Me) the CIM
repository can be found in the directory:

....
%WinDir%\System\Wbem\Repository\cim.rep
....

[yellow-background]*Determine format*

=== Windows NT 4 and 2000

In Windows NT 4.0 with SP4 and Windows 2000 the CIM repository can be found in
the directory:

....
%SystemRoot%\System32\Wbem\Respository\
....

* `CIM.REC`;
* `CIM.REP`;

This document refers to this format as version 2.0.

=== Windows XP and Windows 2003

In Windows XP and Windows 2003 the CIM repository can be found in the directory:

....
%SystemRoot%\System32\WBEM\Repository\FS\
....

This document refers to this format as version 2.1.

Copies of the CIM repository can be stored in the system restore points.

* `Index.btr`; index binary-tree file;
* `Index.map`; (optional) index mappings file, only seen in Windows XP 32-bit
* `Objects.data`; objects data file;
* `Objects.map`; objects mappings file, only seen in Windows XP 32-bit
* `Mapping[1-2].map`; mappings file
* `Mapping.ver`; mappings version file contains # of the active mappings file

=== Windows Vista and later

In Windows Vista and later the CIM repository can be found in the directory:

....
%SystemRoot%\System32\WBEM\Repository\
....

This document refers to this format as version 2.2.

Copies of the CIM repository can be stored in directories named:

....
%SystemRoot%\System32\WBEM\Repository.00[1-9]\
....

* `Index.btr`; index binary-tree file;
* `Objects.data`; objects data file;
* `Mapping[1-3].map`; mappings file, where `Mapping3.map` was introduced in Windows 7

=== Test version

Files created by the following version of programs were used to test the
information within this document:

* [yellow-background]*Windows 95*
* [yellow-background]*Windows 98*
* [yellow-background]*Windows Me*
* [yellow-background]*Windows NT4*
* Windows 2000
* Windows XP
* Windows 2003
* Windows Vista
* Windows 2008
* Windows 7
* Windows 2012
* Windows 8
* Windows 10
* Windows 11

== CIM repository

The CIM repository contains:

* class definitions
* (class) instances
* registration

=== [[cim_index_key]]Index keys

The following information applies to format version 2.1 and 2.2 only.

A CIM repository uses index keys to map to <<object_records,object records>>.

The index keys are stored in the <<index_binary_tree_file,index binary-tree (Index.btr) file>>.
The object records are stored in the <<objects_data_file,objects data file>>.

An example of a format version 2.1 index key:

....
\NS_23EB0A7DE1179904A21E3157C42921A7\CD_438C7C1081B292AE9BF1DEC3208615CB.6.498779.181
....

An example of a format version 2.2 index key:

....
\NS_FCBAF5A1255D45B1176570C0B63AA60199749700C79A11D5811D54A83A1F4EFD\CD_0783FC4315F6719B07F6F7780EAC7B73D0B0471C3E21E23BC45CB6B44FFECA8E.5.1.9646
....

An index key consist of multiple segments separated by '\\'.

An index key segment consist of the following components:

* Type prefix
* Separator "_"
* Name hash
* Optional object record values:
  * Separator "."
  * Mapped page number of the object record in objects.data
  * Separator "."
  * Identifier of the object record in objects.data
  * Data size of the object record in objects.data

==== Type prefixes

The following type prefixes are known:

[cols="1,5",options="header"]
|===
| Prefix | Usage
| C | Class
| CD | Class definition
| CI | Class instance
| CR | Class reference
| I | Instance
| IL | Instance location
| IR | Instance reference
| KI | Class instance with key
| KL | Not observed
| NS | Namespace
| R | Reference
|===

==== [[name_hash]]Name hash

The name hash is either and MD5 hash (version 2.1) or SHA-256 hash (version 2.2)
and is calculated from an upper case name, for example using Python to determine
the identifier of the class name "__thisNAMESPACE":

....
hashlib.sha256('__thisNAMESPACE'.upper().encode('utf-16-le')).hexdigest()

41c53e6db1acf2453cefd41398198e613f10dff47709ecab1d7f037756ac8ce7
....

=== [[cim_data_types]]CIM data types

According to MSDN:

[quote]
____
CimType is a 32-bit value of which only the lower 16 bits are used.
____

[cols="1,1,5",options="header"]
|===
| Value | Identifier | Description
| 0x00000000 | | [yellow-background]*None (Confirm this)* +
A null value
| | |
| 0x00000002 | CIM-TYPE-SINT16 | A signed 16-bit integer
| 0x00000003 | CIM-TYPE-SINT32 | A signed 32-bit integer
| 0x00000004 | CIM-TYPE-REAL32 | A floating-point 32-bit number
| 0x00000005 | CIM-TYPE-REAL64 | A floating-point 64-bit number
| | |
| 0x00000008 | CIM-TYPE-STRING | A string
| | |
| 0x0000000b | CIM-TYPE-BOOLEAN | A boolean +
Stored as a 16-bit value where VARIANT_TRUE (â€“1) or VARIANT_FALSE (0)
| | |
| 0x0000000d | CIM-TYPE-OBJECT | [yellow-background]*An embedded object.*
| | |
| 0x00000010 | CIM-TYPE-SINT8 | A signed 8-bit integer
| 0x00000011 | CIM-TYPE-UINT8 | An unsigned 8-bit integer
| 0x00000012 | CIM-TYPE-UINT16 | An unsigned 16-bit integer
| 0x00000013 | CIM-TYPE-UINT32 | An unsigned 32-bit integer
| 0x00000014 | CIM-TYPE-SINT64 | A signed 64-bit integer
| 0x00000015 | CIM-TYPE-UINT64 | An unsigned 64-bit integer
| | |
| 0x00000065 | CIM-TYPE-DATETIME | A date or time value
| 0x00000066 | CIM-TYPE-REFERENCE | A reference to another object. +
[yellow-background]*This is represented by a string containing the path to the referenced object.* +
[yellow-background]*This value maps to the signed 16-bit integer type (CIM-TYPE-SINT16). (Confirm this)*
| 0x00000067 | CIM-TYPE-CHAR16 | A 16-bit character
| | |
| 0x00002000 | | The array (or multi-value) flag. +
Array property types are identified with CIM-ARRAY instead of CIM-TYPE e.g. CIM-ARRAY-UINT8
| 0x00004000 | | [yellow-background]*Unknown flag*
|===

==== [[cim_datetime]]CIM datetime

The CIM datetime (CIM-TYPE-DATETIME) is stored as a string, in the DMTF
date/time format:

....
yyyymmddHHMMSS.mmmmmmsUUU
....

Where:

* "yyyymmdd" represents the date in year, month and day of month;
* "HHMMSS" represents the time in hours, minutes and seconds;
* "mmmmmm" represents the number of microseconds in 6 digits;
* and "sUUU" represents a sign (+ or -) and a 3-digit UTC offset in minutes.

==== [[cim_string]]CIM string

The CIM string (CIM-TYPE-STRING) is variable of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 1 | | [yellow-background]*Unknown (string type/flags?)*
| 1 | ... | | Property name string +
Contains a string with end-of-string character
|===

==== [[cim_reference]]CIM reference

The CIM reference (CIM-TYPE-REFERENCE) is stored as a string, in the format:

....
\\.\root\Hardware:__Win32Provider.Name="IPMIPrv"
....

Where:

* "\\" is the path prefix;
* "." represents the local machine;
* "\root\" represents the name space;

==== [[cim_integer_array_8bit]]CIM 8-bit integer array

The CIM 8-bit integer array (CIM-ARRAY-SINT8 or CIM-ARRAY-UINT8) is variable of
size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | Number of integers
| 4 | ... | | Array of 8-bit integer values
|===

==== [[cim_string_array]]CIM string array

The CIM string array (CIM-ARRAY-STRING) is variable of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | Number of strings
| 4 | ... | | Array of 32-bit string offsets
|===

==== [[class_definition_block]]Class definition block

The class definition block is variable of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 1 | | [yellow-background]*Unknown (empty values?)*
| 1 | 4 | | Class name offset +
The offset is relative to the start of the properties block data +
See section: <<cim_string,CIM string>>
| 5 | 4 | | [yellow-background]*Unknown (Default values size?)*
| 9 | 4 | | Super class name block size +
Includes the 4 bytes of the size
| 14 | ... | | Super class name block data +
Contains a <<cim_string,CIM string>>
| ... | 4 | | Qualifiers block size
Includes the 4 bytes of the size
| ... | ... | | Qualifiers block data +
See section: <<qualifiers_block,qualifiers block>>
| ... | 4 | | Number of property descriptors
| ... | ... | | Property descriptors array +
See section: <<property_descriptor,Property descriptor>>
| ... | ... | |  [yellow-background]*Unknown (Default values data? bitmap?)*
| ... | 4 | | Values data size
Does not include the 4 bytes of the size +
[yellow-background]*TODO: What is the MSB used for?*
| ... | ... | | Values data
|===

==== [[qualifiers_block]]Qualifiers block

The class qualifiers block is variable of size and consists of:

* zero or more qualifier descriptors

===== Qualifier descriptor

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | Name offset +
The offset is relative to the start of the properties block data +
If the MSB is set the name is predefined and the remainder of the value contains the name index +
See section: <<cim_string,CIM string>> and <<predefined_names,predefined names>>
| 4 | 1 | | [yellow-background]*Unknown*
| 5 | 4 | | Value data type (CimType) +
See section: <<cim_data_types,CIM data types>>
| 9 | ... | | Inline stored value or 32-bit offset to value data
|===

[NOTE]
The qualifier name is case insensitive.

==== [[property_descriptor]]Property descriptor

The property descriptor is 8 bytes of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | Property name offset +
The offset is relative to the start of the properties block data +
If the MSB is set the name is predefined and the remainder of the value contains the name index
See section: <<cim_string,CIM string>> and <<predefined_names,predefined names>>
| 4 | 4 | | Property definition offset +
The offset is relative to the start of the properties block data +
See section: <<property_definition,Property definition>>
|===

===== [[property_definition]]Property definition

The property defintion is variable of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | Property data type (CimType) +
See section: <<cim_data_types,CIM data types>>
| 4 | 2 | | Property index
| 6 | 4 | | Value data offset
| 10 | 4 | | [yellow-background]*Unknown (level?)*
| 14 | 4 | | Qualifiers block size +
Includes the 4 bytes of the size
| 18 | ... | | Qualifiers block data +
See section: <<qualifiers_block,qualifiers block>>
|===

*TODO: seen other multiple optional strings e.g. "WmiDataId" and "WmiSizeIs"*

==== [[predefined_names]]Predefined names

Predefined qualifier and property names:

[cols="1,1,1,5",options="header"]
|===
| Name index | Name | Data type | Description
| 1 | "key" | CIM-TYPE-BOOLEAN |
4+|
| 3 | "read" | CIM-TYPE-BOOLEAN |
| 4 | "write" | CIM-TYPE-BOOLEAN |
| 5 | [yellow-background]*Unknown (volatile?)* | |
| 6 | "provider" | CIM-TYPE-STRING +
CIM-TYPE-REFERENCE |
| 7 | "dynamic" | CIM-TYPE-BOOLEAN |
4+|
| 10 | "type" | CIM-TYPE-STRING |
|===

==== Type qualifiers

It is currently assumed that the class definition type qualifier is a direct
mapping of a MOF data type to a CIM data type.

[cols="1,5",options="header"]
|===
| Value | CIM data type
| boolean | CIM-TYPE-BOOLEAN
| char16 | CIM-TYPE-CHAR16
| datetime | CIM-TYPE-DATETIME
| object | CIM-TYPE-OBJECT
| real32 | CIM-TYPE-REAL32
| real64 | CIM-TYPE-REAL64
| ref | CIM-TYPE-REFERENCE
| sint8 | CIM-TYPE-SINT8
| sint16 | CIM-TYPE-SINT16
| sint32 | CIM-TYPE-SINT32
| sint64 | CIM-TYPE-SINT64
| string | CIM-TYPE-STRING
| uint8 | CIM-TYPE-UINT8
| uint16 | CIM-TYPE-UINT16
| uint32 | CIM-TYPE-UINT32
| uint64 | CIM-TYPE-UINT64
|===

[NOTE]
The type qualifier contains no information about array types.

==== [[instance_block]]Instance block

The instance block is variable of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | Class name offset
| 4 | 1 | | [yellow-background]*Unknown*
| 5 | ... | | [yellow-background]*Unknown (property state bits?)* +
Contains an array of 2 bits per property, that is stored byte aligned +
The number of properties corresponds to the number of unique property names (including those of the super classes)
| ... | ... | | Property values data +
The size of the data can be determined by the property with the largest offset (including those of the super classes) and its size
| ... | ... | | [yellow-background]*Unknown (related to property state bits?)* +
| ... | 4 | | Qualifiers block size +
Includes the 4 bytes of the size
| ... | ... | | Qualifiers block +
See section: <<qualifiers_block,qualifiers block>>
| ... | 1 | | [yellow-background]*Unknown (dynamic block type?)* +
Seen: 1 and 2
4+| _If dynamic block type is 2_
| ... | 4 | | Number of (instance) dynamic properties
| ... | ... | | Array of (instance) dynamic properties
4+| _Common_
| ... | 4 | | [yellow-background]*Unknown (offset?)*
| ... | ... | | Values data
|===

[yellow-background]*Can dynamic block type 2 be used if the class definition
does not specify the dynprops qualifier as True? Related to MOF `[DYNPROPS]`?*

===== Instance property values

Fixed-size instance property values are stored in the property values data.

Variable size instance property values store an offset in the property values
data that is relative to the start of values data.

===== Instance dynamic property

The instance dynamic property is variable of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | Data size +
Includes the 4 bytes of the size
| 4 | ... | | [yellow-background]*Unknown*
|===

=== Namespace

In version 2.0 namespaces are stored as a hierarchy of instances of
the "__NAMESPACE" class.

In version 2.1 and 2.2 no longer store an instance for each part of the
namespace and needs to be derived from the index key. For example the index key:

....
\NS_C82638BEBD36E6F8E4573C4F475C62BF\KI_E5844D1645B0B6E6F2AF610EB14BFC34\I_CB3C05A33F2F537FEA797CE790EDD4C4.63.507235.12
....

Where:

* "C82638BEBD36E6F8E4573C4F475C62BF" is the <<name_hash,name hash>> of "ROOT"
* "E5844D1645B0B6E6F2AF610EB14BFC34" is the <<name_hash,name hash>> of "__NAMESPACE"
* "CB3C05A33F2F537FEA797CE790EDD4C4" is the <<name_hash,name hash>> of "directory"

Which represents the namespace: "ROOT\\directory", however no corresponding
instance of the "__NAMESPACE" class "ROOT" is stored in the repository.

==== Localization namespaces

....
ROOT\CIMV2\ms_409
....

Here 409 represents the language code identifier (LCID) in hexadecimal representation.

==== Special namespaces

[cols="1,1,5",options="header"]
|===
| Namespace | Description
| "__SystemClass" |
|===

[yellow-background]*TODO: special namespace for "__thisNAMESPACE" and "__SystemSecurity" classes?*

The "__thisNAMESPACE" class is used to store a security descriptor for a namespace.

==== Web Based Enterprise Management (WBEM) namespaces

[cols="1,5",options="header"]
|===
| Namespace | Description
| "ROOT" | base (or root) of the namespace hierarchy
| "ROOT\\Appv" |
| "ROOT\\CIMV2" | defines the system objects
| "ROOT\\CIMV2\\Applications" | defines the application-specific objects
| "ROOT\\CIMV2\\Applications\\MicrosoftIE" |
| "ROOT\\CIMV2\\mdm" |
| "ROOT\\CIMV2\\mdm\\dmmap" |
| "ROOT\\CIMV2\\power" |
| "ROOT\\CIMV2\\Security" |
| "ROOT\\CIMV2\\Security\\MicrosoftTpm" |
| "ROOT\\CIMV2\\Security\\MicrosoftVolumeEncryption" |
| "ROOT\\CIMV2\\TerminalServices" |
| "ROOT\\Cli" | defines default WMIC aliases
| "ROOT\\dcim" |
| "ROOT\\dcim\\sysman" |
| "ROOT\\dcim\\sysman\\biosattributes" |
| "ROOT\\dcim\\sysman\\wmisecurity" |
| "ROOT\\DEFAULT" | default namespace
| "ROOT\\directory" | directory (as in directory server) related namespaces
| "ROOT\\directory\\LDAP" | Lightweight Directory Access Protocol (LDAP) related namespaces
| "ROOT\\Hardware" |
| "ROOT\\Intel_ME" |
| "ROOT\\Interop" |
| "ROOT\\Microsoft" |
| "ROOT\\Microsoft\\HomeNet" |
| "ROOT\\Microsoft" | Microsoft related namespaces
| "ROOT\\Microsoft\\protectionManagement" |
| "ROOT\\Microsoft\\SecurityClient" |
| "ROOT\\Microsoft\\Uev" |
| "ROOT\\Microsoft\\Windows" |
| "ROOT\\Microsoft\\Windows\\AppBackgroundTask" |
| "ROOT\\Microsoft\\Windows\\CI" |
| "ROOT\\Microsoft\\Windows\\Defender" |
| "ROOT\\Microsoft\\Windows\\DesiredStateConfiguration" |
| "ROOT\\Microsoft\\Windows\\DesiredStateConfigurationProxy" |
| "ROOT\\Microsoft\\Windows\\DeviceGuard" |
| "ROOT\\Microsoft\\Windows\\dfsn" |
| "ROOT\\Microsoft\\Windows\\DHCP" |
| "ROOT\\Microsoft\\Windows\\Dns" |
| "ROOT\\Microsoft\\Windows\\EventTracingManagement" |
| "ROOT\\Microsoft\\Windows\\HardwareManagement" |
| "ROOT\\Microsoft\\Windows\\Hgs" |
| "ROOT\\Microsoft\\Windows\\Powershellv3" |
| "ROOT\\Microsoft\\Windows\\PS_MMAgent" |
| "ROOT\\Microsoft\\Windows\\RemoteAccess" |
| "ROOT\\Microsoft\\Windows\\RemoteAccess\\Client" |
| "ROOT\\Microsoft\\Windows\\SMB" |
| "ROOT\\Microsoft\\Windows\\SmbWitness" |
| "ROOT\\Microsoft\\Windows\\Storage" |
| "ROOT\\Microsoft\\Windows\\Storage\\Providers_v2" |
| "ROOT\\Microsoft\\Windows\\Storage\\PT" |
| "ROOT\\Microsoft\\Windows\\Storage\\PT\\Alt" |
| "ROOT\\Microsoft\\Windows\\StorageReplica" |
| "ROOT\\Microsoft\\Windows\\TaskScheduler" |
| "ROOT\\Microsoft\\Windows\\Wdac" |
| "ROOT\\Microsoft\\Windows\\WindowsUpdate" |
| "ROOT\\Microsoft\\Windows\\winrm" |
| "ROOT\\MSAPPS10" | Microsoft Office related namespaces
| "ROOT\\msdtc" |
| "ROOT\\MSPS" |
| "ROOT\\nap" |
| "ROOT\\NetFrameworkv1" | .NET framework related namespaces
| "ROOT\\PEH" |
| "ROOT\\Policy" | Group policy related namespaces
| "ROOT\\RSOP" | centralized security policy administration related namespace
| "ROOT\\RSOP\\Computer" |
| "ROOT\\RSOP\\User" |
| "ROOT\\RSOP\\User\\%SID%" | Where %SID% represents a Windows NT security identifier.
| "ROOT\\SECURITY" | WMI system security related namespace
| "ROOT\\SecurityCenter" |
| "ROOT\\SecurityCenter2" |
| "ROOT\\ServiceModel" |
| "ROOT\\StandardCimv2" |
| "ROOT\\StandardCimv2\\embedded" |
| "ROOT\\subscription" | (event) trigger consumer related namespace
| "ROOT\\WMI" | WMI WDM provider related namespace
|===

== [[index_binary_tree_file]]The index binary-tree file (index.btr)

The index binary-tree file (index.btr) is used by format version 2 and consists
of:

* an array of index binary-tree pages

=== Index binary-tree page

The index binary-tree page is 8192 bytes of size and consists of:

* a page header
* [yellow-background]*Unknown*
* sub pages
* page key offsets
* page key data
* page value offsets
* page value data
* padding (0-byte values)

=== Index binary-tree page header

The index binary-tree page header is 16 bytes of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | Index page type +
See section: <<index_binary_tree_page_types,Index binary-tree page types>>
| 4 | 4 | | Mapped page number +
The page number is mapped to the in-file page number via the index mappings file
| 8 | 4 | | [yellow-background]*Unknown (empty values)*
| 12 | 4 | | Mapped root page number +
The page number is mapped to the in-file page number via the index mappings file
|===

In format version 2.1 the mapped index page 0 references an administrative page
(page type: 0xaddd). The index binary-tree page header of this page contains
the mapped root page number.

In format version 2.2 the mapped root page number is assumed to be always 1.

[yellow-background]*TODO: determine if this assumption holds.*

=== [[index_binary_tree_page_types]]Index binary-tree page types

[cols="1,1,5",options="header"]
|===
| Value | Identifier | Description
| 0x0000 | | [yellow-background]*Unknown*
| 0xaccc | | [yellow-background]*Unknown (Is active)*
| 0xaddd | | [yellow-background]*Unknown (Is administrative)*
| 0xbadd | | [yellow-background]*Unknown (Is deleted)*
|===

=== Index binary-tree active page body

The index binary-tree active page body is variable of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | Number of keys
| 4 | number of keys x 4 | | Array of unknown +
See section: <<index_binary_tree_page_unknown_array,Index binary-tree page unknown array>>
| ... | (number of keys + 1) x 4 | | Array of sub pages +
See section: <<index_binary_tree_page_sub_pages_array,Index binary-tree page sub pages array>>
| ... | number of keys x 2 | | Array of key offsets +
See section: <<index_binary_tree_page_key_offset_array,Index binary-tree page key offsets array>>
| ... | ... | | Key data
| ... | 2 | | Number of values
| ... | number of values x 2 | | Array of value offsets +
See section: <<index_binary_tree_page_value_offset_array,Index binary-tree page value offsets array>>
| ... | 2 | | Value data size +
Contains the number of bytes
| ... | ... | | Value data
|===

==== [[index_binary_tree_page_unknown_array]]Index binary-tree page unknown array

The index binary-tree page unknown array is variable of size and consists of:

* number of keys x size of [yellow-background]*Unknown array entry*

The unknown entry is 4 bytes of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | [yellow-background]*Unknown (empty values)*
|===

==== [[index_binary_tree_page_sub_pages_array]]Index binary-tree page sub pages array

The index binary-tree page sub pages array is variable of size and consists of:

* (number of keys + 1) x size of mapped sub page number

The mapped sub page number is 4 bytes of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | Mapped sub page number +
The page number is mapped to the in-file page number via the index mappings file
|===

==== [[index_binary_tree_page_key_offset_array]]Index binary-tree page key offsets array

The index binary-tree page key offsets are variable of size and consist of:

* number of keys x size of offset

The offset is 2 bytes of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 2 | | key data offset +
The offset is relative to the start of the index binary-tree page key data
|===

==== Index binary-tree page key data

The index binary-tree page key data is variable of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 2 | | The number of page key segment indexes
| 2 | ... | | Array 16-bit page key segment indexes
|===

The page key segment indexes refer to page values where a page key consists of
multiple page values e.g.

....
\ VALUE1 \ VALUE2 \ VALUE3
....

==== [[index_binary_tree_page_value_offset_array]]Index binary-tree page value offsets array

The index binary-tree page value offsets array is variable of size and consist of:

* number of values x size of offset

The offset is 2 bytes of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 2 | | value data offset +
The offset is relative to the start of the index binary-tree page value data
|===

== The mapping file (Index.map, Mapping#.map and Objects.map)

The mapping file (Index.map, Mapping#.map and Objects.map) is used by format
version 2.

Windows XP and Windows 2003 use the following version 2.1 mapping files:

* `Index.map` to resolve mapped page numbers to in-file page numbers in `Index.btr`
* `Objects.map` to resolve mapped page numbers to in-file page numbers in `Objects.data`
* `Mapping[1-2].map` contains a backup of the information in `Objects.map`

A version 2.1 mapping file consists of:

* version 2.1 file header
* index or objects mapping table
* unknown table, presumably used for free space tracking
* version 2.1 file footer

In Windows 2003 and XP 64-bit the information of `Index.map` was moved into
a single version version 2.1 mapping file where `Mapping[1-2].map` contain
multiple backups.

* version 2.1 file header
* objects mapping table
* unknown table, presumably used for free space tracking
* version 2.1 file footer
* version 2.1 file header
* index mapping table
* version 2.1 file footer

In Windows Vista the format changed to version 2.2 and in Windows 7
an additional `Mapping3.map` file was added.

* version 2.2 file header
* objects mapping table
* unknown table, presumably used for free space tracking
* version 2.1 file footer
* version 2.2 file header
* index mapping table
* unknown table, presumably used for free space tracking
* version 2.1 file footer
* trailing data

=== File header

==== File header - version 2.1

The file header - version 2.1 is 12 bytes of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | 0x0000abcd | [yellow-background]*Unknown (signature)*
| 4 | 4 | | Sequence number
| 8 | 4 | | Number of pages
|===

==== File header - version 2.2

The file header - version 2.2 is 20 bytes of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | 0x0000abcd | [yellow-background]*Unknown (signature)*
| 4 | 4 | | Sequence number
| 8 | 4 | | [yellow-background]*Unknown (identifier)*
| 12 | 4 | | [yellow-background]*Unknown (identifier - 1)*
| 16 | 4 | | Number of pages
|===

=== Mapping table

The mapping table is variable of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | Number of entries
| 4 | ... | | Array of entries
|===

=== Mapping table entry - version 2.1

The mapping table entry - version 2.1 is 24 bytes of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | Page number +
Contains 0 if not set or 0xffffffff if unavailable
|===

=== Mapping table entry - version 2.2

The mapping table entry - version 2.2 is 24 bytes of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | Page number +
Contains 0 if not set or 0xffffffff if unavailable
| 4 | 4 | | [yellow-background]*Unknown (checksum)* +
[yellow-background]*Contains a CRC-32?*
| 8 | 4 | | [yellow-background]*Unknown (free space?)*
| 12 | 4 | | [yellow-background]*Unknown (used space?)*
| 16 | 4 | | [yellow-background]*Unknown (related to identifiers in the header)*
| 20 | 4 | | [yellow-background]*Unknown (related to identifiers in the header)*
|===

=== Unknown table

The unknown table is variable of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | Number of entries
| 4 | ... | | Array of 32-bit entries
|===

=== File footer

The file footer is 4 bytes of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | 0x0000dcba | [yellow-background]*Unknown (signature)*
|===

== The active mapping file (Mapping.ver)

The active mapping file (Mapping.ver) is used by format version 2.1.

The active mapping file is used in Windows XP and Windows 2003 to indicate
the which `Mapping#.map` file is active (should be used).

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | The active mapping file number
|===

== [[objects_data_file]]The objects data file (Objects.data)

The objects data file (Objects.data) is used by format version 2.1 and 2.2
and consists of:

* an array of objects data pages

[cols="1,5",options="header"]
|===
| Characteristics | Description
| Byte order | little-endian
| Date and time values | FILETIME in UTC
| Character strings | ASCII strings are Single Byte Character (SBC) or Multi Byte Character (MBC) string stored with a codepage. Sometimes referred to as ANSI string representation. +
Though technically maybe incorrect, this document will use term (extended) ASCII string. +
Unicode strings are stored in UTF-16 little-endian without the byte order mark (BOM).
|===

=== Objects data page

The objects data page is 8192 bytes of size and consists of:

* Object descriptors
* [yellow-background]*unknown records*
* [yellow-background]*unknown*

==== Object descriptors

The object descriptors consists of:

* an array of object descriptors
* empty (zero byte filled) object descriptor (or terminator)

===== Object descriptor

The object descriptor is 16 bytes of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | Identifier
| 4 | 4 | | Data offset +
The offset is relative to the start of the object descriptors
| 8 | 4 | | Data size
| 12 | 4 | | Data checksum +
Contains a CRC-32 with polynomial 0xedb88320 and initial value 0 of the object record data
|===

==== [[object_records]]Object records

The object record is defined by the object descriptor and its structure depends
on the data type.

If the object record data is larger than the page size of 8196 the remaining
data is stored spanning multiple pages. Successive pages do not contain object
descriptors and must resolved using mapped page numbers.

===== Class definition object record

The class definition object record is variable of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | Super class name string size +
Contains the number of UTF-16 characters (16-bit values)
| 4 | ... | | Super class name string +
Contains an UTF-16 little-endian string without end-of-string character.
| ... | 8 | | [yellow-background]*Unknown (date and time)* +
Contains a FILETIME
| ... | 4 | | Class definition block size +
Includes the 4 bytes of the size
| ... | ... | | Class definition block data +
See section: <<class_definition_block,Class definition block>>
4+| _If remaining data size > 0_
| ... | 4 | | Methods block size
Includes the 4 bytes of the size
| ... | ... | | Methods block data
|===

===== Registration

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | Name space string size +
Contains the number of UTF-16 characters (16-bit values)
| 4 | ... | | Name space string +
Contains an UTF-16 little-endian string without end-of-string character.
| ... | 4 | | Class string size +
Contains the number of UTF-16 characters (16-bit values)
| ... | ... | | Class string +
Contains an UTF-16 little-endian string without end-of-string character.
| ... | 4 | | Instance name string size +
Contains the number of UTF-16 characters (16-bit values)
| ... | ... | | Instance name string +
Contains an UTF-16 little-endian string without end-of-string character.
| ... | 4 | | Index key string size +
Contains the number of UTF-16 characters (16-bit values)
| ... | ... | | Index key string +
Contains an UTF-16 little-endian string without end-of-string character.
| ... | 8 | | [yellow-background]*Unknown (empty values or unused strings?)*
|===

===== Instance object record

====== Instance object record - version 2.1

The instance object record - version 2.1 is variable of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 64 | | MD5 hash of the class name +
Contains an UTF-16 little-endian string without end-of-string character +
See section: <<cim_index_key,index key path>>
| 64 | 8 | | [yellow-background]*Unknown (date and time)* +
Contains a FILETIME
| 72 | 8 | | [yellow-background]*Unknown (date and time)* +
Contains a FILETIME
| 80 | 4 | | Instance block size +
Includes the 4 bytes of the size
| 84 | ... | | Instance block data +
See section: <<instance_block,instance block>>
|===

====== Instance object record - version 2.2

Instanceobject record  - version 2.2 is used by Windows Vista and later.

The interface - version 2.2 is variable of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 128 | | SHA-256 hash of the class name +
Contains an UTF-16 little-endian string without end-of-string character. +
See section: <<cim_index_key,index key path>>
| 128 | 8 | | [yellow-background]*Unknown (date and time)* +
Contains a FILETIME
| 136 | 8 | | [yellow-background]*Unknown (date and time)* +
Contains a FILETIME
| 144 | 4 | | Instance block size +
Includes the 4 bytes of the size
| 148 | ... | | Instance block data +
See section: <<instance_block,instance block>>
|===

== The repository file (cim.rep)

The repostitory file (cim.reg) is used by format version 1 and consists of:

* first node bin
  * file header
  * one or more node cells
* zero or more successive node bins
  * node bin header
  * one or more node cells
* unused space

=== File header

The file header is 40 bytes of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | Number of node cell with <<class_definition_root_node,class definition root node>> of "__SystemClass" +
Where 0 is the first node cell in the repository file
| 4 | 4 | | Number of node cell with <<instance_root_node,instance root node>> of "__NAMESPACE" instance "ROOT" +
Where 0 is the first node cell in the repository file
| 8 | 4 | | Total data size
| 12 | 4 | | [yellow-background]*Unknown*
| 16 | 4 | | [yellow-background]*Unknown*
| 20 | 4 | | Offset of unused space
| 24 | 4 | | [yellow-background]*Unknown*
| 28 | 4 | | [yellow-background]*Unknown*
| 32 | 4 | | [yellow-background]*Unknown (Offset + 4 to node cell 0?)*
| 36 | 4 | | Node bin size +
Includes the 4 bytes of the size
|===

=== Node bins

A node bin contains:

* header (file header or node bin header)
* one or more node cells

==== Node bin header

The node bin header is 4 bytes of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | Node bin size +
Includes the 4 bytes of the size
|===

==== Node cell

The node cell is variable of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | Data size of the cell +
Includes the 4 bytes of the size +
[yellow-background]*TODO: What is the MSB used for? To indicate a deleted cell?*
| 4 | ... | | Data
|===

=== Child objects list

==== [[child_objects_list_node]]Child objects list node

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | Offset + 4 to node cell with <<child_objects_list_element_node,child objects list element node>>
| 4 | 4 | | Offset + 4 to node cell with first <<child_objects_list_element_node,child objects list element node>>
| 8 | 4 | | Offset + 4 to node cell with last <<child_objects_list_element_node,child objects list element node>>
| 12 | 4 | 31 | [yellow-background]*Unknown*
| 16 | 4 | | [yellow-background]*Unknown (Number of elements in list)*
| 20 | 12 | | [yellow-background]*Unknown (footer?)*
|===

==== [[child_objects_list_element_node]]Child objects list element node

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | [yellow-background]*Unknown* +
Seen: 0 (first element?), 1 and -1 (0xffffffff)
| 4 | 4 | | Offset + 4 to node cell with <<name_node,name node>>
| 8 | 4 | | Offset + 4 to node cell with element value node
| 12 | 4 | | Offset + 4 to node cell with <<child_objects_list_element_node,child objects list element node>> +
Contains 0 if not set
| 16 | 4 | | Offset + 4 to node cell with <<child_objects_list_element_node,child objects list element node>> +
Contains 0 if not set
| 20 | 4 | | Offset + 4 to node cell with previous <<child_objects_list_element_node,child objects list element node>> +
Contains 0 if not set
| 24 | 4 | | Offset + 4 to node cell with next <<child_objects_list_element_node,child objects list element node>> +
Contains 0 if not set
| 28 | 12 | | [yellow-background]*Unknown (footer?)*
|===

The element value node contains:

* <<instance_branch_node,instance branch node>> if referenced from a <<class_definition_root_node,class definition root node>>
* <<class_definition_root_node,class definition root node>> if referenced from a <<instance_root_node,instance root node>>

=== Child objects tree

==== [[child_objects_root_node]]Child objects root node

TODO: rename to child objects tree root node

The child objects root node is 24 bytes of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | 0, 1, 2 | Depth
| 4 | 4 | | Number of leaf values
4+| _If depth is 0 or 1_
| 8 | 4 | | Offset + 4 to node cell with leaf value node +
Contains 0 if not set
4+| _If depth is 2_
| 8 | 4 | | Offset + 4 to node cell with <<child_objects_branch_node,child objects branch node>>
4+| _Common_
| 12 | 12 | | [yellow-background]*Unknown (footer?)*
|===

==== [[child_objects_branch_node]]Child objects branch node

TODO: rename to child objects tree branch node

The child objects branch node is 28 bytes of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | Number of leaf values
| 4 | 4 | | Maximum (or available) number of leaf values
| 8 | 4 | | [yellow-background]*Unknown* +
Seen: 5
| 12 | 4 | | Offset + 4 to node cell with <<child_objects_leaf_node,child objects leaf node>>
| 16 | 12 | | [yellow-background]*Unknown (footer?)*
|===

==== [[child_objects_leaf_node]]Child objects leaf node

TODO: rename to child objects tree leaf node

The child objects leaf node is 52 bytes of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | Offset + 4 to node cell with leaf value node
| 4 | 4 | | Offset + 4 to node cell with leaf value node
| 8 | 4 | | Offset + 4 to node cell with leaf value node
| 12 | 4 | | Offset + 4 to node cell with leaf value node
| 16 | 4 | | Offset + 4 to node cell with leaf value node
| 20 | 4 | | Offset + 4 to node cell with leaf value node
| 24 | 4 | | Offset + 4 to node cell with leaf value node
| 28 | 4 | | Offset + 4 to node cell with leaf value node
| 32 | 4 | | Offset + 4 to node cell with leaf value node
| 36 | 4 | | Offset + 4 to node cell with leaf value node
| 40 | 12 | | [yellow-background]*Unknown (footer?)*
|===

[NOTE]
It is possible that the number of leaf value node cell offsets in the leaf
node is controlled by the maximum (or available) number of leaf values in
the branch node.

=== Class definition hierarchy

==== [[class_definition_root_node]]Class definition root node

The class definition root node is 44 bytes of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | Offset + 4 to node cell with <<instance_root_node,instance root node>>
| 4 | 4 | | Offset + 4 to node cell with <<class_definition_branch_node,class definition branch node>>
| 8 | 4 | | Offset + 4 to node cell with the parent <<class_definition_root_node,class definition root node>> +
Contains 0 if not set
| 12 | 4 | | Sub node type
| 16 | 4 | | Offset + 4 to node cell with <<child_objects_list_node,child objects list node>> +
Contains 0 if not set
| 20 | 4 | | Offset + 4 to node cell with sub node +
Contains 0 if not set
| 24 | 4 | | [yellow-background]*Unknown (empty)*
| 28 | 4 | | Offset + 4 to node cell with <<child_objects_root_node,child objects root node>> +
Contains 0 if not set, the child leaf value nodes refer to a <<name_node,name node>>
| 32 | 12 | | [yellow-background]*Unknown (footer?)*
|===

TODO: Determine if sub node type some combination of flags?

* If sub node type is 0x01, offset + 4 to node cell with sub node is not set (0)?
* If sub node type is 0x02, offset + 4 to node cell with sub node is not set (0)?
* If sub node type is 0x81, offset + 4 to node cell with sub node is not set (0)?

* If sub node type is 0x09, offset + 4 to node cell with sub node refers to: a <<child_objects_root_node,child objects root node>>.
* If sub node type is 0x0a, offset + 4 to node cell with sub node refers to: a <<child_objects_root_node,child objects root node>>.

==== [[class_definition_branch_node]]Class definition branch node

The class definition branch node is 32 bytes of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | Offset + 4 to node cell with corresponding <<instance_root_node,instance root node>>
| 4 | 4 | | Offset + 4 to node cell with <<class_definition_root_node,class definition root node>>
| 8 | 4 | 1 | [yellow-background]*Unknown (leaf node type?)*
| 12 | 4 | | Offset + 4 to node cell with <<class_definition_leaf_node,class definition leaf node>>
| 16 | 4 | | [yellow-background]*Unknown (empty)*
| 20 | 12 | | [yellow-background]*Unknown (footer?)*
|===

==== [[class_definition_leaf_node]]Class definition leaf node

The class definition leaf node is variable of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | Class definition block size +
Includes the 4 bytes of the size
| 4 | ... | | Class definition block data +
See section: <<class_definition_block,Class definition block>>
| ... | 4 | | Unknown block size +
Includes the 4 bytes of the size
| ... | ... | | Unknown block data
| ... | ... | | 32-bit alignment padding
| ... | 12 | | [yellow-background]*Unknown (footer?)*
|===

=== Instance hierarchy

==== [[instance_root_node]]Instance root node

The instance root node is 40 bytes of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | Offset + 4 to node cell with <<child_objects_root_node,child objects root node>>
| 4 | 4 | | Offset + 4 to node cell with <<name_node,name node>>
| 8 | 4 | | Offset + 4 to node cell with <<instance_branch_node,instance branch node>>
| 12 | 4 | 1, 8 | [yellow-background]*Unknown (type indicator or offset?)*
| 16 | 4 | | Offset + 4 to node cell with <<child_objects_list_node,child objects list node>>
| 16 | 4 | | Offset + 4 to node cell with [yellow-background]*Unknown*
| 24 | 4 | | Offset + 4 to node cell with <<unknown_node5,unknown node 5>>
| 28 | 12 | | [yellow-background]*Unknown (footer?)*
|===

==== [[instance_branch_node]]Instance branch node

The instance branch node is 32 bytes of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | Offset + 4 to node cell with corresponding <<instance_root_node,instance root node>> +
Contains 0 if not set
| 4 | 4 | | Offset + 4 to node cell with <<class_definition_root_node,class definition root node>>
| 8 | 4 | 2 | [yellow-background]*Unknown (type indicator or offset?)*
| 12 | 4 | | Offset + 4 to node cell with <<instance_leaf_node,instance leaf node>>
| 16 | 4 | | [yellow-background]*Unknown (empty values?)*
| 20 | 12 | | [yellow-background]*Unknown (footer?)*
|===

....
Alternate variant seen in parent instance hierarchy
0x00000000  b0 00 00 00 20 03 00 00  74 01 00 00 01 00 00 00  .... ...t.......
0x00000010  1c e3 00 00 00 00 00 00  00 00 00 00 00 00 00 00  ................
0x00000020  00 00 00 00 fe fe fe fe  fe fe fe fe              ............
....

==== [[instance_leaf_value_node]]Instance leaf value node

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | Offset + 4 to node cell with <<name_node,name node>>
| 4 | 4 | | Offset + 4 to node cell with <<instance_root_node,instance root node>>
| 8 | 12 | | [yellow-background]*Unknown (footer?)*
|===

==== [[unknown_node5]]Unknown node 5

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | [yellow-background]*Unknown* block size +
Includes the 4 bytes of the size
| 4 | ... | | [yellow-background]*Unknown* block data +
| ... | 12 | | [yellow-background]*Unknown (footer?)*
|===

....
Unknown block data:
0x00000000  01 00 00 00 01 00 00 00  02 00 00 00 00 00 00 00  ................

0x00000010  00 02 18 00 3f 00 06 00                           ....?...........

SID?
0x00000010                           01 02 00 00 00 00 00 05  ....?...........
0x00000020  20 00 00 00 20 02 00 00                            ... ...........

0x00000020                           00 02 14 00 13 00 00 00   ... ...........

SID?
0x00000030  01 01 00 00 00 00 00 01  00 00 00 00              ............
....

==== [[instance_leaf_node]]Instance leaf node

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | Instance block size +
Includes the 4 bytes of the size
| 4 | ... | | Instance block data +
See section: <<instance_block,instance block>>
| ... | 12 | | [yellow-background]*Unknown (footer?)*
|===

==== [[name_node]]Name node

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | ... | | Name +
Contains an UTF-16 little-endian string with end-of-string character.
| ... | ... | | 32-bit alignment padding
| ... | 12 | | [yellow-background]*Unknown (footer?)*
|===

== The recovery file (cim.rec)

The recovery file (cim.rec) is used by format version 1 and consists of:

* file header
* compressed blocks
* [yellow-background]*Unknown (footer or terminator block?)*

The recovery file is presumed to be a compressed backup of the repository file
(cim.rep).

=== File header

The file header is 24 bytes of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | | [yellow-background]*Unknown (signature?)*
| 4 | 4 | 0x8000 | [yellow-background]*Unknown (page or uncompressed block size?)*
| 8 | 8 | | [yellow-background]*Unknown (date and time)* +
Contains a FILETIME
| 16 | 8 | | [yellow-background]*Unknown (total uncompressed data size?)*
|===

=== Compressed block

The compressed block is variable of size and consists of:

[cols="1,1,1,5",options="header"]
|===
| Offset | Size | Value | Description
| 0 | 4 | 1 | [yellow-background]*Unknown (version?)*
| 4 | 4 | | Compressed data size
| 8 | 4 | 0x8000 | Uncompressed data size
4+| _Compressed data_
| 12 | 2 | "DS" | [yellow-background]*Unknown (compression signature?)*
| 14 | ... | | [yellow-background]*Unknown (compressed data)*
|===

:numbered!:
[appendix]
== References

`[DMTF]`

[cols="1,5",options="header"]
|===
| Title: | CIM Schema: Version 2.45.0
| URL: | http://www.dmtf.org/standards/cim/cim_schema_v2450
|===

`[FLAREWMI]`

[cols="1,5",options="header"]
|===
| Title: | Flare WMI project
| URL: | https://github.com/fireeye/flare-wmi
|===

`[MSDN]`

[cols="1,5",options="header"]
|===
| Title: | `[MS-WMIO]`: CimType
| URL: | https://msdn.microsoft.com/en-us/library/cc250928.aspx
|===

`[TECHNET]`

[cols="1,5",options="header"]
|===
| Title: | Technet: WMI Infrastructure
| URL: | https://technet.microsoft.com/en-us/library/ee198935.aspx
|===

`[TUNSTALL02]`

[cols="1,5",options="header"]
|===
| Title: | Developing WMI Solutions: A Guide to Windows Management Instrumentation
| Author(s): | Craig Tunstall, Gwyn Cole
| Date: | November 22, 2002
|===

[appendix]
== GNU Free Documentation License

Version 1.3, 3 November 2008
Copyright Â© 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
<http://fsf.org/>

Everyone is permitted to copy and distribute verbatim copies of this license
document, but changing it is not allowed.

=== 0. PREAMBLE

The purpose of this License is to make a manual, textbook, or other functional
and useful document "free" in the sense of freedom: to assure everyone the
effective freedom to copy and redistribute it, with or without modifying it,
either commercially or noncommercially. Secondarily, this License preserves for
the author and publisher a way to get credit for their work, while not being
considered responsible for modifications made by others.

This License is a kind of "copyleft", which means that derivative works of the
document must themselves be free in the same sense. It complements the GNU
General Public License, which is a copyleft license designed for free software.

We have designed this License in order to use it for manuals for free software,
because free software needs free documentation: a free program should come with
manuals providing the same freedoms that the software does. But this License is
not limited to software manuals; it can be used for any textual work,
regardless of subject matter or whether it is published as a printed book. We
recommend this License principally for works whose purpose is instruction or
reference.

=== 1. APPLICABILITY AND DEFINITIONS

This License applies to any manual or other work, in any medium, that contains
a notice placed by the copyright holder saying it can be distributed under the
terms of this License. Such a notice grants a world-wide, royalty-free license,
unlimited in duration, to use that work under the conditions stated herein. The
"Document", below, refers to any such manual or work. Any member of the public
is a licensee, and is addressed as "you". You accept the license if you copy,
modify or distribute the work in a way requiring permission under copyright law.

A "Modified Version" of the Document means any work containing the Document or
a portion of it, either copied verbatim, or with modifications and/or
translated into another language.

A "Secondary Section" is a named appendix or a front-matter section of the
Document that deals exclusively with the relationship of the publishers or
authors of the Document to the Document's overall subject (or to related
matters) and contains nothing that could fall directly within that overall
subject. (Thus, if the Document is in part a textbook of mathematics, a
Secondary Section may not explain any mathematics.) The relationship could be a
matter of historical connection with the subject or with related matters, or of
legal, commercial, philosophical, ethical or political position regarding them.

The "Invariant Sections" are certain Secondary Sections whose titles are
designated, as being those of Invariant Sections, in the notice that says that
the Document is released under this License. If a section does not fit the
above definition of Secondary then it is not allowed to be designated as
Invariant. The Document may contain zero Invariant Sections. If the Document
does not identify any Invariant Sections then there are none.

The "Cover Texts" are certain short passages of text that are listed, as
Front-Cover Texts or Back-Cover Texts, in the notice that says that the
Document is released under this License. A Front-Cover Text may be at most 5
words, and a Back-Cover Text may be at most 25 words.

A "Transparent" copy of the Document means a machine-readable copy, represented
in a format whose specification is available to the general public, that is
suitable for revising the document straightforwardly with generic text editors
or (for images composed of pixels) generic paint programs or (for drawings)
some widely available drawing editor, and that is suitable for input to text
formatters or for automatic translation to a variety of formats suitable for
input to text formatters. A copy made in an otherwise Transparent file format
whose markup, or absence of markup, has been arranged to thwart or discourage
subsequent modification by readers is not Transparent. An image format is not
Transparent if used for any substantial amount of text. A copy that is not
"Transparent" is called "Opaque".

Examples of suitable formats for Transparent copies include plain ASCII without
markup, Texinfo input format, LaTeX input format, SGML or XML using a publicly
available DTD, and standard-conforming simple HTML, PostScript or PDF designed
for human modification. Examples of transparent image formats include PNG, XCF
and JPG. Opaque formats include proprietary formats that can be read and edited
only by proprietary word processors, SGML or XML for which the DTD and/or
processing tools are not generally available, and the machine-generated HTML,
PostScript or PDF produced by some word processors for output purposes only.

The "Title Page" means, for a printed book, the title page itself, plus such
following pages as are needed to hold, legibly, the material this License
requires to appear in the title page. For works in formats which do not have
any title page as such, "Title Page" means the text near the most prominent
appearance of the work's title, preceding the beginning of the body of the text.

The "publisher" means any person or entity that distributes copies of the
Document to the public.

A section "Entitled XYZ" means a named subunit of the Document whose title
either is precisely XYZ or contains XYZ in parentheses following text that
translates XYZ in another language. (Here XYZ stands for a specific section
name mentioned below, such as "Acknowledgements", "Dedications",
"Endorsements", or "History".) To "Preserve the Title" of such a section when
you modify the Document means that it remains a section "Entitled XYZ"
according to this definition.

The Document may include Warranty Disclaimers next to the notice which states
that this License applies to the Document. These Warranty Disclaimers are
considered to be included by reference in this License, but only as regards
disclaiming warranties: any other implication that these Warranty Disclaimers
may have is void and has no effect on the meaning of this License.

=== 2. VERBATIM COPYING

You may copy and distribute the Document in any medium, either commercially or
noncommercially, provided that this License, the copyright notices, and the
license notice saying this License applies to the Document are reproduced in
all copies, and that you add no other conditions whatsoever to those of this
License. You may not use technical measures to obstruct or control the reading
or further copying of the copies you make or distribute. However, you may
accept compensation in exchange for copies. If you distribute a large enough
number of copies you must also follow the conditions in section 3.

You may also lend copies, under the same conditions stated above, and you may
publicly display copies.

=== 3. COPYING IN QUANTITY

If you publish printed copies (or copies in media that commonly have printed
covers) of the Document, numbering more than 100, and the Document's license
notice requires Cover Texts, you must enclose the copies in covers that carry,
clearly and legibly, all these Cover Texts: Front-Cover Texts on the front
cover, and Back-Cover Texts on the back cover. Both covers must also clearly
and legibly identify you as the publisher of these copies. The front cover must
present the full title with all words of the title equally prominent and
visible. You may add other material on the covers in addition. Copying with
changes limited to the covers, as long as they preserve the title of the
Document and satisfy these conditions, can be treated as verbatim copying in
other respects.

If the required texts for either cover are too voluminous to fit legibly, you
should put the first ones listed (as many as fit reasonably) on the actual
cover, and continue the rest onto adjacent pages.

If you publish or distribute Opaque copies of the Document numbering more than
100, you must either include a machine-readable Transparent copy along with
each Opaque copy, or state in or with each Opaque copy a computer-network
location from which the general network-using public has access to download
using public-standard network protocols a complete Transparent copy of the
Document, free of added material. If you use the latter option, you must take
reasonably prudent steps, when you begin distribution of Opaque copies in
quantity, to ensure that this Transparent copy will remain thus accessible at
the stated location until at least one year after the last time you distribute
an Opaque copy (directly or through your agents or retailers) of that edition
to the public.

It is requested, but not required, that you contact the authors of the Document
well before redistributing any large number of copies, to give them a chance to
provide you with an updated version of the Document.

=== 4. MODIFICATIONS

You may copy and distribute a Modified Version of the Document under the
conditions of sections 2 and 3 above, provided that you release the Modified
Version under precisely this License, with the Modified Version filling the
role of the Document, thus licensing distribution and modification of the
Modified Version to whoever possesses a copy of it. In addition, you must do
these things in the Modified Version:

A. Use in the Title Page (and on the covers, if any) a title distinct from that
of the Document, and from those of previous versions (which should, if there
were any, be listed in the History section of the Document). You may use the
same title as a previous version if the original publisher of that version
gives permission.

B. List on the Title Page, as authors, one or more persons or entities
responsible for authorship of the modifications in the Modified Version,
together with at least five of the principal authors of the Document (all of
its principal authors, if it has fewer than five), unless they release you from
this requirement.

C. State on the Title page the name of the publisher of the Modified Version,
as the publisher.

D. Preserve all the copyright notices of the Document.

E. Add an appropriate copyright notice for your modifications adjacent to the
other copyright notices.

F. Include, immediately after the copyright notices, a license notice giving
the public permission to use the Modified Version under the terms of this
License, in the form shown in the Addendum below.

G. Preserve in that license notice the full lists of Invariant Sections and
required Cover Texts given in the Document's license notice.

H. Include an unaltered copy of this License.

I. Preserve the section Entitled "History", Preserve its Title, and add to it
an item stating at least the title, year, new authors, and publisher of the
Modified Version as given on the Title Page. If there is no section Entitled
"History" in the Document, create one stating the title, year, authors, and
publisher of the Document as given on its Title Page, then add an item
describing the Modified Version as stated in the previous sentence.

J. Preserve the network location, if any, given in the Document for public
access to a Transparent copy of the Document, and likewise the network
locations given in the Document for previous versions it was based on. These
may be placed in the "History" section. You may omit a network location for a
work that was published at least four years before the Document itself, or if
the original publisher of the version it refers to gives permission.

K. For any section Entitled "Acknowledgements" or "Dedications", Preserve the
Title of the section, and preserve in the section all the substance and tone of
each of the contributor acknowledgements and/or dedications given therein.

L. Preserve all the Invariant Sections of the Document, unaltered in their text
and in their titles. Section numbers or the equivalent are not considered part
of the section titles.

M. Delete any section Entitled "Endorsements". Such a section may not be
included in the Modified Version.

N. Do not retitle any existing section to be Entitled "Endorsements" or to
conflict in title with any Invariant Section.

O. Preserve any Warranty Disclaimers.

If the Modified Version includes new front-matter sections or appendices that
qualify as Secondary Sections and contain no material copied from the Document,
you may at your option designate some or all of these sections as invariant. To
do this, add their titles to the list of Invariant Sections in the Modified
Version's license notice. These titles must be distinct from any other section
titles.

You may add a section Entitled "Endorsements", provided it contains nothing but
endorsements of your Modified Version by various partiesâ€”for example,
statements of peer review or that the text has been approved by an organization
as the authoritative definition of a standard.

You may add a passage of up to five words as a Front-Cover Text, and a passage
of up to 25 words as a Back-Cover Text, to the end of the list of Cover Texts
in the Modified Version. Only one passage of Front-Cover Text and one of
Back-Cover Text may be added by (or through arrangements made by) any one
entity. If the Document already includes a cover text for the same cover,
previously added by you or by arrangement made by the same entity you are
acting on behalf of, you may not add another; but you may replace the old one,
on explicit permission from the previous publisher that added the old one.

The author(s) and publisher(s) of the Document do not by this License give
permission to use their names for publicity for or to assert or imply
endorsement of any Modified Version.

=== 5. COMBINING DOCUMENTS

You may combine the Document with other documents released under this License,
under the terms defined in section 4 above for modified versions, provided that
you include in the combination all of the Invariant Sections of all of the
original documents, unmodified, and list them all as Invariant Sections of your
combined work in its license notice, and that you preserve all their Warranty
Disclaimers.

The combined work need only contain one copy of this License, and multiple
identical Invariant Sections may be replaced with a single copy. If there are
multiple Invariant Sections with the same name but different contents, make the
title of each such section unique by adding at the end of it, in parentheses,
the name of the original author or publisher of that section if known, or else
a unique number. Make the same adjustment to the section titles in the list of
Invariant Sections in the license notice of the combined work.

In the combination, you must combine any sections Entitled "History" in the
various original documents, forming one section Entitled "History"; likewise
combine any sections Entitled "Acknowledgements", and any sections Entitled
"Dedications". You must delete all sections Entitled "Endorsements".

=== 6. COLLECTIONS OF DOCUMENTS

You may make a collection consisting of the Document and other documents
released under this License, and replace the individual copies of this License
in the various documents with a single copy that is included in the collection,
provided that you follow the rules of this License for verbatim copying of each
of the documents in all other respects.

You may extract a single document from such a collection, and distribute it
individually under this License, provided you insert a copy of this License
into the extracted document, and follow this License in all other respects
regarding verbatim copying of that document.

=== 7. AGGREGATION WITH INDEPENDENT WORKS

A compilation of the Document or its derivatives with other separate and
independent documents or works, in or on a volume of a storage or distribution
medium, is called an "aggregate" if the copyright resulting from the
compilation is not used to limit the legal rights of the compilation's users
beyond what the individual works permit. When the Document is included in an
aggregate, this License does not apply to the other works in the aggregate
which are not themselves derivative works of the Document.

If the Cover Text requirement of section 3 is applicable to these copies of the
Document, then if the Document is less than one half of the entire aggregate,
the Document's Cover Texts may be placed on covers that bracket the Document
within the aggregate, or the electronic equivalent of covers if the Document is
in electronic form. Otherwise they must appear on printed covers that bracket
the whole aggregate.

=== 8. TRANSLATION

Translation is considered a kind of modification, so you may distribute
translations of the Document under the terms of section 4. Replacing Invariant
Sections with translations requires special permission from their copyright
holders, but you may include translations of some or all Invariant Sections in
addition to the original versions of these Invariant Sections. You may include
a translation of this License, and all the license notices in the Document, and
any Warranty Disclaimers, provided that you also include the original English
version of this License and the original versions of those notices and
disclaimers. In case of a disagreement between the translation and the original
version of this License or a notice or disclaimer, the original version will
prevail.

If a section in the Document is Entitled "Acknowledgements", "Dedications", or
"History", the requirement (section 4) to Preserve its Title (section 1) will
typically require changing the actual title.

=== 9. TERMINATION

You may not copy, modify, sublicense, or distribute the Document except as
expressly provided under this License. Any attempt otherwise to copy, modify,
sublicense, or distribute it is void, and will automatically terminate your
rights under this License.

However, if you cease all violation of this License, then your license from a
particular copyright holder is reinstated (a) provisionally, unless and until
the copyright holder explicitly and finally terminates your license, and (b)
permanently, if the copyright holder fails to notify you of the violation by
some reasonable means prior to 60 days after the cessation.

Moreover, your license from a particular copyright holder is reinstated
permanently if the copyright holder notifies you of the violation by some
reasonable means, this is the first time you have received notice of violation
of this License (for any work) from that copyright holder, and you cure the
violation prior to 30 days after your receipt of the notice.

Termination of your rights under this section does not terminate the licenses
of parties who have received copies or rights from you under this License. If
your rights have been terminated and not permanently reinstated, receipt of a
copy of some or all of the same material does not give you any rights to use it.

=== 10. FUTURE REVISIONS OF THIS LICENSE

The Free Software Foundation may publish new, revised versions of the GNU Free
Documentation License from time to time. Such new versions will be similar in
spirit to the present version, but may differ in detail to address new problems
or concerns. See http://www.gnu.org/copyleft/.

Each version of the License is given a distinguishing version number. If the
Document specifies that a particular numbered version of this License "or any
later version" applies to it, you have the option of following the terms and
conditions either of that specified version or of any later version that has
been published (not as a draft) by the Free Software Foundation. If the
Document does not specify a version number of this License, you may choose any
version ever published (not as a draft) by the Free Software Foundation. If the
Document specifies that a proxy can decide which future versions of this
License can be used, that proxy's public statement of acceptance of a version
permanently authorizes you to choose that version for the Document.

=== 11. RELICENSING

"Massive Multiauthor Collaboration Site" (or "MMC Site") means any World Wide
Web server that publishes copyrightable works and also provides prominent
facilities for anybody to edit those works. A public wiki that anybody can edit
is an example of such a server. A "Massive Multiauthor Collaboration" (or
"MMC") contained in the site means any set of copyrightable works thus
published on the MMC site.

"CC-BY-SA" means the Creative Commons Attribution-Share Alike 3.0 license
published by Creative Commons Corporation, a not-for-profit corporation with a
principal place of business in San Francisco, California, as well as future
copyleft versions of that license published by that same organization.

"Incorporate" means to publish or republish a Document, in whole or in part, as
part of another Document.

An MMC is "eligible for relicensing" if it is licensed under this License, and
if all works that were first published under this License somewhere other than
this MMC, and subsequently incorporated in whole or in part into the MMC, (1)
had no cover texts or invariant sections, and (2) were thus incorporated prior
to November 1, 2008.

The operator of an MMC Site may republish an MMC contained in the site under
CC-BY-SA on the same site at any time before August 1, 2009, provided the MMC
is eligible for relicensing.

